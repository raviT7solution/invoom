type Addons {
  deliveryPrice: Float!
  id: ID!
  name: String!
  price: Float!
  takeoutPrice: Float!
  visible: Boolean!
}

input AddonsAttributes {
  deliveryPrice: Float
  name: String
  price: Float
  takeoutPrice: Float
  visible: Boolean
}

"""
Autogenerated input type of AddonsCreate
"""
input AddonsCreateInput {
  attributes: AddonsAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  restaurantId: ID!
}

"""
Autogenerated input type of AddonsDelete
"""
input AddonsDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of AddonsUpdate
"""
input AddonsUpdateInput {
  attributes: AddonsAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

type Admin {
  email: String!
  firstName: String!
  fullName: String!
  id: ID!
  lastName: String!
  restaurants: [Restaurant!]!
}

type AdminSession {
  token: String!
}

"""
Autogenerated input type of AdminSessionCreate
"""
input AdminSessionCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
  subject: AdminSessionCreateSubjectEnum!
}

enum AdminSessionCreateSubjectEnum {
  mobile
  web
}

type Booking {
  bookingTables: [BookingTable!]!
  bookingType: BookingType!
  clockedInAt: ISO8601DateTime!
  clockedOutAt: ISO8601DateTime
  id: ID!
  tickets: [Ticket!]!
  userFullName: String!
}

input BookingAttributes {
  bookingType: BookingTypeAttribute
  clockedInAt: ISO8601DateTime
  floorObjectIds: [ID!]
}

"""
Autogenerated input type of BookingCreate
"""
input BookingCreateInput {
  attributes: BookingAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  restaurantId: ID!
}

type BookingTable {
  booking: Booking!
  floorObject: FloorObject
  name: String!
}

enum BookingType {
  delivery
  dine_in
  takeout
}

enum BookingTypeAttribute {
  delivery
  dine_in
  takeout
}

type Category {
  id: ID!
  items: [Item!]!
  menuIds: [ID!]!
  name: String!
  visible: Boolean!
}

input CategoryAttributes {
  menuIds: [ID!]
  name: String
  visible: Boolean
}

"""
Autogenerated input type of CategoryCreate
"""
input CategoryCreateInput {
  attributes: CategoryAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  restaurantId: ID!
}

"""
Autogenerated input type of CategoryDelete
"""
input CategoryDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of CategoryUpdate
"""
input CategoryUpdateInput {
  attributes: CategoryAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

type City {
  name: String!
}

"""
Type for CollectionMetadataType
"""
type CollectionMetadata {
  """
  Current Page of loaded data
  """
  currentPage: Int!

  """
  The number of items per page
  """
  limitValue: Int!

  """
  The total number of items to be paginated
  """
  totalCount: Int!

  """
  The total number of pages in the pagination
  """
  totalPages: Int!
}

type Country {
  alpha2: String!
  code: String!
  name: String!
  timezones: [Timezone!]!
}

type FloorObject {
  bookingTable: BookingTable
  data: JSON!
  id: ID!
  name: String!
  objectType: String!
}

input FloorObjectAttributes {
  data: JSON
  name: String
  objectType: String
}

"""
Autogenerated input type of FloorObjectUpdate
"""
input FloorObjectUpdateInput {
  attributes: [FloorObjectAttributes!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  restaurantId: ID!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type InventoryCategory {
  description: String!
  id: ID!
  name: String!
  visible: Boolean!
}

input InventoryCategoryAttributes {
  description: String
  name: String
  visible: Boolean
}

"""
Autogenerated input type of InventoryCategoryCreate
"""
input InventoryCategoryCreateInput {
  attributes: InventoryCategoryAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  restaurantId: ID!
}

"""
Autogenerated input type of InventoryCategoryDelete
"""
input InventoryCategoryDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of InventoryCategoryUpdate
"""
input InventoryCategoryUpdateInput {
  attributes: InventoryCategoryAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

type Item {
  addonIds: [ID!]!
  addons: [Addons!]!
  categoryId: ID!
  costOfProduction: Float!
  deliveryPrice: Float!
  description: String!
  displayName: String!
  id: ID!
  modifierIds: [ID!]!
  modifiers: [Modifier!]!
  name: String!
  price: Float!
  takeOutPrice: Float!
  visible: Boolean!
}

input ItemAttributes {
  addonIds: [ID!]
  categoryId: ID
  costOfProduction: Float
  deliveryPrice: Float
  description: String
  displayName: String
  modifierIds: [ID!]
  name: String
  price: Float
  takeOutPrice: Float
  visible: Boolean
}

"""
Autogenerated input type of ItemCreate
"""
input ItemCreateInput {
  attributes: ItemAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  restaurantId: ID!
}

"""
Autogenerated input type of ItemDelete
"""
input ItemDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of ItemUpdate
"""
input ItemUpdateInput {
  attributes: ItemAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Represents untyped JSON
"""
scalar JSON

type Menu {
  categories: [Category!]!
  description: String!
  id: ID!
  name: String!
  visible: Boolean!
}

input MenuAttributes {
  description: String
  name: String
  visible: Boolean
}

"""
Autogenerated input type of MenuCreate
"""
input MenuCreateInput {
  attributes: MenuAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  restaurantId: ID!
}

"""
Autogenerated input type of MenuDelete
"""
input MenuDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of MenuUpdate
"""
input MenuUpdateInput {
  attributes: MenuAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

type Modifier {
  categoryIds: [ID!]!
  globalModifier: Boolean!
  id: ID!
  itemIds: [ID!]!
  multiSelect: Boolean!
  name: String!
  values: [String!]!
  visible: Boolean!
}

input ModifierAttributes {
  categoryIds: [ID!]
  globalModifier: Boolean
  itemIds: [ID!]
  multiSelect: Boolean
  name: String
  values: [String!]!
  visible: Boolean
}

"""
Autogenerated input type of ModifierCreate
"""
input ModifierCreateInput {
  attributes: ModifierAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  restaurantId: ID!
}

"""
Autogenerated input type of ModifierDelete
"""
input ModifierDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of ModifierUpdate
"""
input ModifierUpdateInput {
  attributes: ModifierAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

type Mutation {
  addonsCreate(
    """
    Parameters for AddonsCreate
    """
    input: AddonsCreateInput!
  ): Boolean!
  addonsDelete(
    """
    Parameters for AddonsDelete
    """
    input: AddonsDeleteInput!
  ): Boolean!
  addonsUpdate(
    """
    Parameters for AddonsUpdate
    """
    input: AddonsUpdateInput!
  ): Boolean!
  adminSessionCreate(
    """
    Parameters for AdminSessionCreate
    """
    input: AdminSessionCreateInput!
  ): AdminSession!
  bookingCreate(
    """
    Parameters for BookingCreate
    """
    input: BookingCreateInput!
  ): ID!
  categoryCreate(
    """
    Parameters for CategoryCreate
    """
    input: CategoryCreateInput!
  ): Boolean!
  categoryDelete(
    """
    Parameters for CategoryDelete
    """
    input: CategoryDeleteInput!
  ): Boolean!
  categoryUpdate(
    """
    Parameters for CategoryUpdate
    """
    input: CategoryUpdateInput!
  ): Boolean!
  floorObjectUpdate(
    """
    Parameters for FloorObjectUpdate
    """
    input: FloorObjectUpdateInput!
  ): Boolean!
  inventoryCategoryCreate(
    """
    Parameters for InventoryCategoryCreate
    """
    input: InventoryCategoryCreateInput!
  ): Boolean!
  inventoryCategoryDelete(
    """
    Parameters for InventoryCategoryDelete
    """
    input: InventoryCategoryDeleteInput!
  ): Boolean!
  inventoryCategoryUpdate(
    """
    Parameters for InventoryCategoryUpdate
    """
    input: InventoryCategoryUpdateInput!
  ): Boolean!
  itemCreate(
    """
    Parameters for ItemCreate
    """
    input: ItemCreateInput!
  ): Boolean!
  itemDelete(
    """
    Parameters for ItemDelete
    """
    input: ItemDeleteInput!
  ): Boolean!
  itemUpdate(
    """
    Parameters for ItemUpdate
    """
    input: ItemUpdateInput!
  ): Boolean!
  menuCreate(
    """
    Parameters for MenuCreate
    """
    input: MenuCreateInput!
  ): Boolean!
  menuDelete(
    """
    Parameters for MenuDelete
    """
    input: MenuDeleteInput!
  ): Boolean!
  menuUpdate(
    """
    Parameters for MenuUpdate
    """
    input: MenuUpdateInput!
  ): Boolean!
  modifierCreate(
    """
    Parameters for ModifierCreate
    """
    input: ModifierCreateInput!
  ): Boolean!
  modifierDelete(
    """
    Parameters for ModifierDelete
    """
    input: ModifierDeleteInput!
  ): Boolean!
  modifierUpdate(
    """
    Parameters for ModifierUpdate
    """
    input: ModifierUpdateInput!
  ): Boolean!
  restaurantCreate(
    """
    Parameters for RestaurantCreate
    """
    input: RestaurantCreateInput!
  ): Boolean!
  roleCreate(
    """
    Parameters for RoleCreate
    """
    input: RoleCreateInput!
  ): Role!
  roleDelete(
    """
    Parameters for RoleDelete
    """
    input: RoleDeleteInput!
  ): Role!
  roleUpdate(
    """
    Parameters for RoleUpdate
    """
    input: RoleUpdateInput!
  ): Role!
  ticketCreate(
    """
    Parameters for TicketCreate
    """
    input: TicketCreateInput!
  ): Boolean!
  ticketItemsUpdate(
    """
    Parameters for TicketItemsUpdate
    """
    input: TicketItemsUpdateInput!
  ): Boolean!
  userCreate(
    """
    Parameters for UserCreate
    """
    input: UserCreateInput!
  ): Boolean!
  userDelete(
    """
    Parameters for UserDelete
    """
    input: UserDeleteInput!
  ): User!
  userSessionCreate(
    """
    Parameters for UserSessionCreate
    """
    input: UserSessionCreateInput!
  ): UserSession!
  userUpdate(
    """
    Parameters for UserUpdate
    """
    input: UserUpdateInput!
  ): Boolean!
}

type Province {
  code: String!
  name: String!
}

type Query {
  addon(id: ID!): Addons!
  addons(restaurantId: ID!): [Addons!]!
  booking(id: ID!): Booking!
  bookings(restaurantId: ID!): [Booking!]!
  categories(restaurantId: ID!): [Category!]!
  category(id: ID!): Category!
  cities(alpha2: String!, provinceCode: String!): [City!]!
  countries: [Country!]!
  currentAdmin: Admin!
  floorObjects(restaurantId: ID!): [FloorObject!]!
  inventoryCategories(restaurantId: ID!): [InventoryCategory!]!
  inventoryCategory(id: ID!): InventoryCategory!
  item(id: ID!): Item!
  items(categoryId: ID, restaurantId: ID!): [Item!]!
  menu(id: ID!): Menu!
  menus(restaurantId: ID!): [Menu!]!
  modifier(id: ID!): Modifier!
  modifiers(restaurantId: ID!): [Modifier!]!
  provinces(alpha2: String!): [Province!]!
  restaurants(status: String!): [Restaurant!]!
  role(id: ID!): Role!
  roles(restaurantId: ID!): [Role!]!
  tickets(limit: Int!, offset: Int!, restaurantId: ID!): TicketCollection!
  user(id: ID!): User!
}

type Restaurant {
  address: String
  city: String!
  id: ID!
  name: String!
  province: String!
  timezone: String!
}

input RestaurantAttributes {
  address: String
  breakEndTime: String
  breakStartTime: String
  businessEndTime: String
  businessStartTime: String
  city: String
  country: String
  email: String
  name: String
  operationalSince: String
  phoneNumber: String
  postalCode: String
  province: String
  restaurantType: String
  timezone: String
}

"""
Autogenerated input type of RestaurantCreate
"""
input RestaurantCreateInput {
  attributes: RestaurantAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type Role {
  id: ID!
  name: String!
  permissions: [String!]!
  users: [User!]!
}

input RoleAttributes {
  name: String
  permissions: [String!]
}

"""
Autogenerated input type of RoleCreate
"""
input RoleCreateInput {
  attributes: RoleAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  restaurantId: ID!
}

"""
Autogenerated input type of RoleDelete
"""
input RoleDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of RoleUpdate
"""
input RoleUpdateInput {
  attributes: RoleAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

type Ticket {
  booking: Booking!
  id: ID!
  ticketItems: [TicketItem!]!
}

"""
TicketCollection type
"""
type TicketCollection {
  """
  A collection of paginated TicketCollection
  """
  collection: [Ticket!]!

  """
  Pagination Metadata for navigating the Pagination
  """
  metadata: CollectionMetadata!
}

"""
Autogenerated input type of TicketCreate
"""
input TicketCreateInput {
  attributes: [TicketItemAttributes!]!
  bookingId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type TicketItem {
  displayName: String!
  id: ID!
  modifiers: [String!]!
  name: String!
  note: String
  price: Float!
  quantity: Int!
  status: TicketItemStatusType!
  ticketItemAddons: [TicketItemAddon!]!
}

type TicketItemAddon {
  id: ID!
  name: String!
  price: Float!
}

input TicketItemAttributes {
  addonIds: [ID!]
  id: ID
  itemId: ID
  modifiers: [String!]
  note: String
  quantity: Int
  status: TicketItemStatusAttribute
}

enum TicketItemStatusAttribute {
  preparing
  queued
  ready
  served
}

enum TicketItemStatusType {
  preparing
  queued
  ready
  served
}

"""
Autogenerated input type of TicketItemsUpdate
"""
input TicketItemsUpdateInput {
  attributes: [TicketItemAttributes!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type Timezone {
  humanizeOffset: String!
  identifier: String!
  offset: Int!
}

type User {
  address: String
  city: String
  clockedInAt: ISO8601DateTime
  country: String
  countryCode: String!
  email: String!
  employmentType: String!
  endDate: String
  firstName: String!
  fullName: String!
  gender: String!
  id: ID!
  lastName: String!
  maxHour: Float!
  overTime: Boolean!
  phoneNumber: String!
  preferredName: String!
  province: String
  roleIds: [ID!]!
  startDate: ISO8601Date!
  wage: Float!
  zipCode: String
}

input UserAttributes {
  address: String
  city: String
  country: String
  countryCode: String
  email: String
  employmentType: String
  endDate: String
  firstName: String
  gender: String
  lastName: String
  maxHour: Float
  password: String
  phoneNumber: String
  pin: String
  preferredName: String
  province: String
  roleIds: [ID!]
  startDate: String
  wage: Float
  zipCode: String
}

"""
Autogenerated input type of UserCreate
"""
input UserCreateInput {
  attributes: UserAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  restaurantId: ID!
}

"""
Autogenerated input type of UserDelete
"""
input UserDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

type UserSession {
  clockInStatus: UserSessionClockInStatus
  permissions: [UserSessionPermissionsType!]!
  token: String!
}

input UserSessionAttributes {
  clockType: UserSessionClockType!
  loginType: UserSessionLoginType!
  password: String
  pin: String
  userId: ID
}

enum UserSessionClockInStatus {
  already_clocked_in
  already_clocked_out
}

enum UserSessionClockType {
  clock_in
  clock_out
}

"""
Autogenerated input type of UserSessionCreate
"""
input UserSessionCreateInput {
  attributes: UserSessionAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  restaurantId: ID!
}

enum UserSessionLoginType {
  password
  pin
}

enum UserSessionPermissionsType {
  clock_in_clock_out
  floor_plan
  orders
}

"""
Autogenerated input type of UserUpdate
"""
input UserUpdateInput {
  attributes: UserAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}
