mutation adminSessionCreate($input: AdminSessionCreateInput!) {
  adminSessionCreate(input: $input) {
    token
  }
}

query currentAdmin {
  currentAdmin {
    fullName
  }
}

query restaurants($status: String) {
  restaurants(status: $status) {
    city
    id
    name
    province
    timezone
  }
}

mutation roleCreate($input: RoleCreateInput!) {
  roleCreate(input: $input) {
    id
  }
}

mutation roleUpdate($input: RoleUpdateInput!) {
  roleUpdate(input: $input) {
    id
  }
}

mutation roleDelete($id: ID!) {
  roleDelete(input: { id: $id }) {
    id
  }
}

query role($id: ID!) {
  role(id: $id) {
    id
    name
    permissions
  }
}

query roles($restaurantId: ID!) {
  roles(restaurantId: $restaurantId) {
    id
    name
    users {
      id
      fullName
    }
  }
}

mutation userCreate($input: UserCreateInput!) {
  userCreate(input: $input)
}

mutation userUpdate($input: UserUpdateInput!) {
  userUpdate(input: $input)
}

mutation userDelete($id: ID!) {
  userDelete(input: { id: $id }) {
    id
  }
}

query user($id: ID!) {
  user(id: $id) {
    address
    city
    country
    countryCode
    email
    employmentType
    endDate
    firstName
    fullName
    gender
    id
    lastName
    maxHour
    phoneNumber
    preferredName
    province
    roleIds
    startDate
    wage
    zipCode
  }
}

query floorObjects($restaurantId: ID!) {
  floorObjects(restaurantId: $restaurantId) {
    data {
      addons {
        chairQuantity
        type
      }
      length
      rotate
      translateX
      translateY
      width
    }
    id
    name
    objectType
  }
}

mutation floorObjectUpdate($input: FloorObjectUpdateInput!) {
  floorObjectUpdate(input: $input)
}

query menus($restaurantId: ID!) {
  menus(restaurantId: $restaurantId) {
    id
    name
    visible
    description
  }
}

query menu($id: ID!) {
  menu(id: $id) {
    id
    name
    visible
    description
  }
}

mutation menuCreate($input: MenuCreateInput!) {
  menuCreate(input: $input)
}

mutation menuDelete($id: ID!) {
  menuDelete(input: { id: $id })
}

mutation menuUpdate($input: MenuUpdateInput!) {
  menuUpdate(input: $input)
}

mutation createCategory($input: CategoryCreateInput!) {
  categoryCreate(input: $input)
}

query categories($restaurantId: ID!) {
  categories(restaurantId: $restaurantId) {
    id
    name
    visible
    menuIds
    items {
      addonIds
      categoryId
      costOfProduction
      deliveryPrice
      description
      displayName
      id
      name
      price
      takeoutPrice
      visible
    }
  }
}

query category($id: ID!) {
  category(id: $id) {
    id
    name
    visible
    menuIds
  }
}

mutation categoryUpdate($input: CategoryUpdateInput!) {
  categoryUpdate(input: $input)
}

mutation categoryDelete($id: ID!) {
  categoryDelete(input: { id: $id })
}

query addons($restaurantId: ID!) {
  addons(restaurantId: $restaurantId) {
    id
    name
    price
    takeoutPrice
    deliveryPrice
    visible
  }
}

query addon($id: ID!) {
  addon(id: $id) {
    id
    name
    price
    takeoutPrice
    deliveryPrice
    visible
  }
}

mutation addonsCreate($input: AddonsCreateInput!) {
  addonsCreate(input: $input)
}

mutation addonsUpdate($input: AddonsUpdateInput!) {
  addonsUpdate(input: $input)
}

mutation addonsDelete($id: ID!) {
  addonsDelete(input: { id: $id })
}

mutation restaurantCreate($input: RestaurantCreateInput!) {
  restaurantCreate(input: $input)
}

mutation itemCreate($input: ItemCreateInput!) {
  itemCreate(input: $input)
}

query items($restaurantId: ID!) {
  items(restaurantId: $restaurantId) {
    addonIds
    categoryId
    costOfProduction
    deliveryPrice
    description
    displayName
    id
    modifierIds
    name
    price
    takeoutPrice
    taxId
    visible
  }
}

query item($id: ID!) {
  item(id: $id) {
    addonIds
    categoryId
    costOfProduction
    deliveryPrice
    description
    displayName
    id
    modifierIds
    name
    price
    takeoutPrice
    taxId
    visible
  }
}

mutation itemUpdate($input: ItemUpdateInput!) {
  itemUpdate(input: $input)
}

mutation itemDelete($id: ID!) {
  itemDelete(input: { id: $id })
}

query modifiers($restaurantId: ID!) {
  modifiers(restaurantId: $restaurantId) {
    categoryIds
    globalModifier
    id
    itemIds
    multiSelect
    name
    values
    visible
  }
}

query modifier($id: ID!) {
  modifier(id: $id) {
    categoryIds
    globalModifier
    id
    itemIds
    multiSelect
    name
    values
    visible
  }
}

mutation modifierCreate($input: ModifierCreateInput!) {
  modifierCreate(input: $input)
}

mutation modifierUpdate($input: ModifierUpdateInput!) {
  modifierUpdate(input: $input)
}

mutation modifierDelete($id: ID!) {
  modifierDelete(input: { id: $id })
}

query countries {
  countries {
    alpha2
    code
    name
    timezones {
      humanizeOffset
      identifier
    }
  }
}

query provinces($alpha2: String!) {
  provinces(alpha2: $alpha2) {
    code
    name
  }
}

query cities($alpha2: String!, $provinceCode: String!) {
  cities(alpha2: $alpha2, provinceCode: $provinceCode) {
    name
  }
}

mutation inventoryCategoryCreate($input: InventoryCategoryCreateInput!) {
  inventoryCategoryCreate(input: $input)
}

mutation inventoryCategoryUpdate($input: InventoryCategoryUpdateInput!) {
  inventoryCategoryUpdate(input: $input)
}

mutation inventoryCategoryDelete($id: ID!) {
  inventoryCategoryDelete(input: { id: $id })
}

query inventoryCategories($restaurantId: ID!) {
  inventoryCategories(restaurantId: $restaurantId) {
    id
    name
    visible
    description
  }
}

query inventoryCategory($id: ID!) {
  inventoryCategory(id: $id) {
    id
    name
    visible
    description
  }
}

query timeSheets(
  $endDate: String
  $page: Int!
  $perPage: Int!
  $restaurantId: ID!
  $startDate: String
  $userIds: [String!]
) {
  timeSheets(
    endDate: $endDate
    page: $page
    perPage: $perPage
    restaurantId: $restaurantId
    startDate: $startDate
    userIds: $userIds
  ) {
    collection {
      endTime
      id
      startTime
      user {
        firstName
        lastName
      }
    }
    metadata {
      currentPage
      limitValue
      totalCount
      totalPages
    }
  }
}

query users($restaurantId: ID!) {
  users(restaurantId: $restaurantId) {
    id
    fullName
  }
}

query taxes($restaurantId: ID!) {
  taxes(restaurantId: $restaurantId) {
    category
    displayName
    gst
    hst
    id
    pst
    qst
    rst
  }
}

query tickets(
  $bookingTypes: [String!]
  $kitchenProfileId: ID
  $page: Int!
  $perPage: Int!
  $restaurantId: ID!
  $status: [String!]
) {
  tickets(
    bookingTypes: $bookingTypes
    kitchenProfileId: $kitchenProfileId
    page: $page
    perPage: $perPage
    restaurantId: $restaurantId
    status: $status
  ) {
    metadata {
      totalCount
    }
    collection {
      booking {
        bookingTables {
          name
        }
        bookingType
        clockedInAt
        customer {
          name
        }
        id
        userFullName
      }
      id
      ticketItems {
        displayName
        id
        modifiers
        quantity
        status
        ticketItemAddons {
          id
          name
        }
      }
    }
  }
}

mutation ticketItemsUpdate($input: TicketItemsUpdateInput!) {
  ticketItemsUpdate(input: $input)
}

query kitchenProfiles($restaurantId: ID!) {
  kitchenProfiles(restaurantId: $restaurantId) {
    id
    name
  }
}

mutation itemCodeGenerate($input: ItemCodeGenerateInput!) {
  itemCodeGenerate(input: $input)
}

mutation productCreate($input: ProductCreateInput!) {
  productCreate(input: $input)
}

mutation productDelete($id: ID!) {
  productDelete(input: { id: $id })
}

mutation productUpdate($input: ProductUpdateInput!) {
  productUpdate(input: $input)
}

query products($restaurantId: ID!) {
  products(restaurantId: $restaurantId) {
    description
    id
    inventoryCategoryId
    itemCode
    name
    price
    reorderPoint
    stockLimit
    taxId
    uom
    visible
    weight
  }
}

query product($id: ID!) {
  product(id: $id) {
    description
    id
    inventoryCategoryId
    itemCode
    name
    price
    reorderPoint
    stockLimit
    taxId
    uom
    visible
    weight
  }
}

mutation changePassword($input: ChangePasswordInput!) {
  changePassword(input: $input)
}
