mutation adminSessionCreate($input: AdminSessionCreateInput!) {
  adminSessionCreate(input: $input) {
    token
  }
}

query currentAdmin {
  currentAdmin {
    fullName
  }
}

query restaurant($id: String!) {
  restaurant(id: $id) {
    id
    stripeAccountId
    stripeAccountType
  }
}

query restaurants($status: String) {
  restaurants(status: $status) {
    city
    id
    name
    province
    timezone
  }
}

mutation roleCreate($input: RoleCreateInput!) {
  roleCreate(input: $input) {
    id
  }
}

mutation roleUpdate($input: RoleUpdateInput!) {
  roleUpdate(input: $input) {
    id
  }
}

mutation roleDelete($id: ID!) {
  roleDelete(input: { id: $id }) {
    id
  }
}

query role($id: ID!) {
  role(id: $id) {
    autoClockIn
    id
    name
    permissions
  }
}

query roles($restaurantId: ID!) {
  roles(restaurantId: $restaurantId) {
    autoClockIn
    id
    name
    users {
      id
      fullName
    }
  }
}

mutation userCreate($input: UserCreateInput!) {
  userCreate(input: $input)
}

mutation userUpdate($input: UserUpdateInput!) {
  userUpdate(input: $input)
}

mutation userDelete($id: ID!) {
  userDelete(input: { id: $id }) {
    id
  }
}

query user($id: ID!) {
  user(id: $id) {
    address
    city
    country
    countryCode
    email
    employmentType
    endDate
    firstName
    fullName
    gender
    id
    lastName
    maxHour
    phoneNumber
    preferredName
    province
    roleIds
    startDate
    wage
    zipCode
  }
}

query floorObjects($restaurantId: ID!) {
  floorObjects(restaurantId: $restaurantId) {
    data {
      addons {
        chairQuantity
        type
      }
      length
      rotate
      translateX
      translateY
      width
    }
    id
    name
    objectType
  }
}

mutation floorObjectUpdate($input: FloorObjectUpdateInput!) {
  floorObjectUpdate(input: $input)
}

query menus($restaurantId: ID!) {
  menus(restaurantId: $restaurantId) {
    id
    name
    visible
    description
  }
}

query menu($id: ID!) {
  menu(id: $id) {
    id
    name
    visible
    description
  }
}

mutation menuCreate($input: MenuCreateInput!) {
  menuCreate(input: $input)
}

mutation menuDelete($id: ID!) {
  menuDelete(input: { id: $id })
}

mutation menuUpdate($input: MenuUpdateInput!) {
  menuUpdate(input: $input)
}

mutation createCategory($input: CategoryCreateInput!) {
  categoryCreate(input: $input)
}

query categories($restaurantId: ID!) {
  categories(restaurantId: $restaurantId) {
    id
    items {
      addonIds
      categoryId
      costOfProduction
      deliveryPrice
      description
      displayName
      id
      name
      price
      takeoutPrice
      visible
    }
    menuIds
    name
    taxId
    visible
  }
}

query category($id: ID!) {
  category(id: $id) {
    id
    menuIds
    name
    taxId
    visible
  }
}

mutation categoryUpdate($input: CategoryUpdateInput!) {
  categoryUpdate(input: $input)
}

mutation categoryDelete($id: ID!) {
  categoryDelete(input: { id: $id })
}

query addons($restaurantId: ID!) {
  addons(restaurantId: $restaurantId) {
    deliveryPrice
    id
    name
    price
    takeoutPrice
    visible
  }
}

query addon($id: ID!) {
  addon(id: $id) {
    deliveryPrice
    eqPrice
    id
    name
    price
    takeoutPrice
    visible
  }
}

mutation addonsCreate($input: AddonsCreateInput!) {
  addonsCreate(input: $input)
}

mutation addonsUpdate($input: AddonsUpdateInput!) {
  addonsUpdate(input: $input)
}

mutation addonsDelete($id: ID!) {
  addonsDelete(input: { id: $id })
}

mutation restaurantCreate($input: RestaurantCreateInput!) {
  restaurantCreate(input: $input)
}

mutation itemCreate($input: ItemCreateInput!) {
  itemCreate(input: $input)
}

query items($restaurantId: ID!) {
  items(restaurantId: $restaurantId) {
    addonIds
    categoryId
    costOfProduction
    deliveryPrice
    description
    displayName
    eqPrice
    id
    modifierIds
    name
    price
    takeoutPrice
    taxId
    uom
    visible
  }
}

query item($id: ID!) {
  item(id: $id) {
    addonIds
    categoryId
    costOfProduction
    deliveryPrice
    description
    displayName
    eqPrice
    id
    modifierIds
    name
    price
    takeoutPrice
    taxId
    uom
    visible
  }
}

mutation itemUpdate($input: ItemUpdateInput!) {
  itemUpdate(input: $input)
}

mutation itemDelete($id: ID!) {
  itemDelete(input: { id: $id })
}

query modifiers($restaurantId: ID!) {
  modifiers(restaurantId: $restaurantId) {
    categoryIds
    globalModifier
    id
    itemIds
    multiSelect
    name
    values
    visible
  }
}

query modifier($id: ID!) {
  modifier(id: $id) {
    categoryIds
    globalModifier
    id
    itemIds
    multiSelect
    name
    values
    visible
  }
}

mutation modifierCreate($input: ModifierCreateInput!) {
  modifierCreate(input: $input)
}

mutation modifierUpdate($input: ModifierUpdateInput!) {
  modifierUpdate(input: $input)
}

mutation modifierDelete($id: ID!) {
  modifierDelete(input: { id: $id })
}

query countries {
  countries {
    alpha2
    code
    name
    timezones {
      humanizeOffset
      identifier
    }
  }
}

query provinces($alpha2: String!) {
  provinces(alpha2: $alpha2) {
    code
    name
  }
}

query cities($alpha2: String!, $provinceCode: String!) {
  cities(alpha2: $alpha2, provinceCode: $provinceCode) {
    name
  }
}

mutation inventoryCategoryCreate($input: InventoryCategoryCreateInput!) {
  inventoryCategoryCreate(input: $input)
}

mutation inventoryCategoryUpdate($input: InventoryCategoryUpdateInput!) {
  inventoryCategoryUpdate(input: $input)
}

mutation inventoryCategoryDelete($id: ID!) {
  inventoryCategoryDelete(input: { id: $id })
}

query inventoryCategories($restaurantId: ID!) {
  inventoryCategories(restaurantId: $restaurantId) {
    description
    id
    name
    visible
  }
}

query inventoryCategory($id: ID!) {
  inventoryCategory(id: $id) {
    description
    id
    name
    visible
  }
}

mutation restaurantUpdate($input: RestaurantUpdateInput!) {
  restaurantUpdate(input: $input)
}

query timeSheets(
  $endDate: ISO8601DateTime
  $page: Int!
  $perPage: Int!
  $restaurantId: ID!
  $startDate: ISO8601DateTime
  $userIds: [String!]
) {
  timeSheets(
    endDate: $endDate
    page: $page
    perPage: $perPage
    restaurantId: $restaurantId
    startDate: $startDate
    userIds: $userIds
  ) {
    collection {
      endTime
      id
      startTime
      user {
        firstName
        lastName
      }
    }
    metadata {
      currentPage
      limitValue
      totalCount
      totalPages
    }
  }
}

query users($restaurantId: ID!) {
  users(restaurantId: $restaurantId) {
    id
    fullName
  }
}

query taxes($restaurantId: ID!) {
  taxes(restaurantId: $restaurantId) {
    category
    cst
    displayName
    gst
    hst
    id
    pst
    qst
    rst
  }
}

query tickets(
  $bookingTypes: [String!]
  $kitchenProfileId: ID
  $page: Int!
  $perPage: Int!
  $restaurantId: ID!
  $status: [String!]
) {
  tickets(
    bookingTypes: $bookingTypes
    kitchenProfileId: $kitchenProfileId
    page: $page
    perPage: $perPage
    restaurantId: $restaurantId
    status: $status
  ) {
    metadata {
      totalCount
    }
    collection {
      booking {
        bookingTables {
          name
        }
        bookingType
        customer {
          name
        }
        id
        number
        token
        userFullName
      }
      createdAt
      id
      ticketItems {
        displayName
        id
        modifiers
        note
        quantity
        status
        ticketItemAddons {
          id
          name
        }
        uom
        updatedAt
      }
    }
  }
}

mutation ticketItemsUpdate($input: TicketItemsUpdateInput!) {
  ticketItemsUpdate(input: $input)
}

mutation itemCodeGenerate($input: ItemCodeGenerateInput!) {
  itemCodeGenerate(input: $input)
}

mutation productCreate($input: ProductCreateInput!) {
  productCreate(input: $input)
}

mutation productDelete($id: ID!) {
  productDelete(input: { id: $id })
}

mutation productUpdate($input: ProductUpdateInput!) {
  productUpdate(input: $input)
}

query products($restaurantId: ID!, $page: Int!, $perPage: Int!) {
  products(restaurantId: $restaurantId, page: $page, perPage: $perPage) {
    collection {
      availableQuantity
      description
      id
      inventoryCategory {
        name
      }
      itemCode
      name
      price
      reorderPoint
      stockLimit
      taxId
      uom
      visible
      weight
    }
    metadata {
      currentPage
      limitValue
      totalCount
      totalPages
    }
  }
}

query product($id: ID!) {
  product(id: $id) {
    description
    id
    inventoryCategoryId
    itemCode
    name
    price
    reorderPoint
    stockLimit
    taxId
    uom
    visible
    weight
  }
}

mutation productTransactionCreate($input: ProductTransactionCreateInput!) {
  productTransactionCreate(input: $input)
}

mutation changePassword($input: ChangePasswordInput!) {
  changePassword(input: $input)
}

query kitchenProfiles($restaurantId: ID!) {
  kitchenProfiles(restaurantId: $restaurantId) {
    id
    name
  }
}

query kitchenProfile($id: ID!) {
  kitchenProfile(id: $id) {
    categoryIds
    columns
    id
    name
    notify
    printerConfigurationId
    rows
  }
}

mutation kitchenProfileCreate($input: KitchenProfileCreateInput!) {
  kitchenProfileCreate(input: $input)
}

mutation kitchenProfileUpdate($input: KitchenProfileUpdateInput!) {
  kitchenProfileUpdate(input: $input)
}

mutation kitchenProfileDelete($id: ID!) {
  kitchenProfileDelete(input: { id: $id })
}

query discounts($restaurantId: ID!) {
  discounts(restaurantId: $restaurantId) {
    discountType
    id
    name
    value
    visible
  }
}

query discount($id: ID!) {
  discount(id: $id) {
    autoApply
    blackOutDates
    capping
    categoryIds
    channels
    clubbed
    discountOn
    discountType
    endDateTime
    id
    itemIds
    name
    repeat
    startDateTime
    threshold
    value
    visible
  }
}

mutation discountCreate($input: DiscountCreateInput!) {
  discountCreate(input: $input)
}

mutation discountUpdate($input: DiscountUpdateInput!) {
  discountUpdate(input: $input)
}

mutation discountDelete($id: ID!) {
  discountDelete(input: { id: $id })
}

mutation printerConfigurationCreate($input: PrinterConfigurationCreateInput!) {
  printerConfigurationCreate(input: $input)
}

mutation printerConfigurationUpdate($input: PrinterConfigurationUpdateInput!) {
  printerConfigurationUpdate(input: $input)
}

mutation printerConfigurationDelete($id: ID!) {
  printerConfigurationDelete(input: { id: $id })
}

query printerConfiguration($id: ID!) {
  printerConfiguration(id: $id) {
    id
    ipAddress
    name
    port
    visible
  }
}

query printerConfigurations($restaurantId: ID!) {
  printerConfigurations(restaurantId: $restaurantId) {
    id
    ipAddress
    name
    port
    visible
  }
}

query bookings(
  $bookingTypes: [String!]
  $endDate: ISO8601DateTime
  $export: Boolean
  $page: Int!
  $perPage: Int!
  $restaurantId: ID!
  $startDate: ISO8601DateTime
  $status: String
) {
  bookings(
    bookingTypes: $bookingTypes
    endDate: $endDate
    export: $export
    page: $page
    perPage: $perPage
    restaurantId: $restaurantId
    startDate: $startDate
    status: $status
  ) {
    collection {
      bookingTables {
        name
      }
      bookingType
      clockedInAt
      clockedOutAt
      customer {
        name
      }
      id
      invoices {
        id
        number
        payments {
          paymentMode
          tip
        }
        serviceChargeSummary {
          name
          value
        }
        subTotal
        taxSummary {
          name
          value
        }
        total
        totalDiscount
      }
      number
      pax
      token
      userFullName
    }
    metadata {
      currentPage
      limitValue
      totalCount
      totalPages
    }
  }
}

query invoices(
  $bookingTypes: [String!]
  $endDate: ISO8601DateTime
  $export: Boolean
  $page: Int!
  $perPage: Int!
  $restaurantId: ID!
  $startDate: ISO8601DateTime
  $status: String
) {
  invoices(
    bookingTypes: $bookingTypes
    endDate: $endDate
    export: $export
    page: $page
    perPage: $perPage
    restaurantId: $restaurantId
    startDate: $startDate
    status: $status
  ) {
    collection {
      booking {
        bookingTables {
          name
        }
        bookingType
        clockedInAt
        clockedOutAt
        customer {
          name
        }
        number
        pax
        token
        userFullName
      }
      id
      number
      payments {
        paymentMode
        tip
      }
      serviceChargeSummary {
        name
        value
      }
      subTotal
      taxSummary {
        name
        value
      }
      total
      totalDiscount
    }
    metadata {
      currentPage
      limitValue
      totalCount
      totalPages
    }
  }
}

query timeSheet($id: ID!) {
  timeSheet(id: $id) {
    endTime
    startTime
    userId
  }
}

mutation timeSheetCreate($input: TimeSheetCreateInput!) {
  timeSheetCreate(input: $input)
}

mutation timeSheetDelete($id: ID!) {
  timeSheetDelete(input: { id: $id })
}

mutation timeSheetUpdate($input: TimeSheetUpdateInput!) {
  timeSheetUpdate(input: $input)
}

mutation serviceChargeCreate($input: ServiceChargeCreateInput!) {
  serviceChargeCreate(input: $input)
}

mutation serviceChargeUpdate($input: ServiceChargeUpdateInput!) {
  serviceChargeUpdate(input: $input)
}

mutation serviceChargeDelete($id: ID!) {
  serviceChargeDelete(input: { id: $id })
}

query serviceCharge($id: ID!) {
  serviceCharge(id: $id) {
    chargeType
    id
    name
    taxId
    value
    visible
  }
}

query serviceCharges($restaurantId: ID!) {
  serviceCharges(restaurantId: $restaurantId) {
    chargeType
    id
    name
    taxId
    value
    visible
  }
}

query dashboardSummary(
  $endTime: ISO8601DateTime!
  $restaurantId: ID!
  $startTime: ISO8601DateTime!
) {
  dashboardSummary(
    endTime: $endTime
    restaurantId: $restaurantId
    startTime: $startTime
  ) {
    avgBookingRevenue
    avgInvoiceRevenue
    bookingCount
    cardRevenue
    cashRevenue
    chequeRevenue
    deliveryRevenue
    dineInRevenue
    doorDashRevenue
    giftCardRevenue
    hourlyRevenue
    invoiceCount
    paxCount
    skipTheDishesRevenue
    takeoutRevenue
    totalRevenue
    uberEatsRevenue
    voidRevenue
  }
}

query salesSummary(
  $endTime: ISO8601DateTime
  $restaurantId: ID!
  $startTime: ISO8601DateTime
) {
  dashboardSummary(
    endTime: $endTime
    restaurantId: $restaurantId
    startTime: $startTime
  ) {
    avgBookingRevenue
    avgInvoiceRevenue
    bookingCount
    invoiceCount
    paxCount
    totalRevenue
    totalTax
    totalTip
  }
}

query customers(
  $export: Boolean
  $page: Int!
  $perPage: Int!
  $query: String
  $restaurantId: ID!
) {
  customers(
    export: $export
    page: $page
    perPage: $perPage
    query: $query
    restaurantId: $restaurantId
  ) {
    collection {
      avgInvoiceAmount
      email
      id
      invoiceCount
      name
      phoneNumber
      totalInvoiceAmount
    }
    metadata {
      currentPage
      limitValue
      totalCount
      totalPages
    }
  }
}

query timeSheetSummary(
  $endTime: ISO8601DateTime
  $restaurantId: ID!
  $startTime: ISO8601DateTime
  $userIds: [ID!]
) {
  timeSheetSummary(
    endTime: $endTime
    restaurantId: $restaurantId
    startTime: $startTime
    userIds: $userIds
  ) {
    totalHours
  }
}
